// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Search.Documents
{
    // Data plane generated client. The Search service client.
    /// <summary> The Search service client. </summary>
    public partial class SearchClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly Guid? _xMsClientRequestId;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SearchClient for mocking. </summary>
        protected SearchClient()
        {
        }

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> The endpoint URL of the search service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SearchClient(string endpoint) : this(endpoint, null, new SearchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> The endpoint URL of the search service. </param>
        /// <param name="xMsClientRequestId"> The tracking ID sent with the request to help with debugging. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SearchClient(string endpoint, Guid? xMsClientRequestId, SearchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SearchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _xMsClientRequestId = xMsClientRequestId;
            _apiVersion = options.Version;
        }

        /// <summary> Queries the number of documents in the index. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CountAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.CountAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CountAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.Count");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCountRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Queries the number of documents in the index. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Count and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.Count();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response Count(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.Count");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCountRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches for documents in the index. </summary>
        /// <param name="searchText"> A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents. </param>
        /// <param name="includeTotalResultCount"> A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. </param>
        /// <param name="facets"> The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. </param>
        /// <param name="filter"> The OData $filter expression to apply to the search query. </param>
        /// <param name="highlightFields"> The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;. </param>
        /// <param name="orderBy"> The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. </param>
        /// <param name="queryType"> A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax. Allowed values: &quot;simple&quot; | &quot;full&quot;. </param>
        /// <param name="scoringParameters"> The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes). </param>
        /// <param name="scoringProfile"> The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. </param>
        /// <param name="searchFields"> The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. </param>
        /// <param name="searchMode"> A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. Allowed values: &quot;any&quot; | &quot;all&quot;. </param>
        /// <param name="select"> The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. </param>
        /// <param name="skip"> The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead. </param>
        /// <param name="top"> The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SearchGetAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.SearchGetAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// ]]></code>
        /// This sample shows how to call SearchGetAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.SearchGetAsync("<searchText>", true, new String[]{"<facets>"}, "<filter>", new String[]{"<highlightFields>"}, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<orderBy>"}, "<queryType>", new String[]{"<scoringParameters>"}, "<scoringProfile>", new String[]{"<searchFields>"}, "<searchMode>", new String[]{"<select>"}, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@odata.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("<test>")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("facets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("filter").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlight").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPostTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPreTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("orderby").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("queryType").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringParameters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringProfile").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("search").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchFields").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchMode").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("select").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("skip").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("top").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("<test>")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@odata.nextLink").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Search-Documents
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchDocumentsResult</c>:
        /// <code>{
        ///   @odata.count: number, # Optional. The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can&apos;t return all the requested documents in a single Search response.
        ///   @search.facets: Dictionary&lt;string, FacetResult[]&gt;, # Optional. The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
        ///   @search.nextPageParameters: {
        ///     count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///     facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///     filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///     highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///     highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///     highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///     orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///     queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///     scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///     scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///     search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///     searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///     searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///     select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///     skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///     top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        ///   }, # Optional. Continuation JSON payload returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
        ///   value: [
        ///     {
        ///       @search.score: number, # Required. The relevance score of the document compared to other documents returned by the query.
        ///       @search.highlights: Dictionary&lt;string, string[]&gt;, # Optional. Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        ///   @odata.nextLink: string, # Optional. Continuation URL returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SearchGetAsync(string searchText = null, bool? includeTotalResultCount = null, IEnumerable<string> facets = null, string filter = null, IEnumerable<string> highlightFields = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> orderBy = null, string queryType = null, IEnumerable<string> scoringParameters = null, string scoringProfile = null, IEnumerable<string> searchFields = null, string searchMode = null, IEnumerable<string> select = null, int? skip = null, int? top = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.SearchGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchGetRequest(searchText, includeTotalResultCount, facets, filter, highlightFields, highlightPostTag, highlightPreTag, orderBy, queryType, scoringParameters, scoringProfile, searchFields, searchMode, select, skip, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches for documents in the index. </summary>
        /// <param name="searchText"> A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents. </param>
        /// <param name="includeTotalResultCount"> A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. </param>
        /// <param name="facets"> The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. </param>
        /// <param name="filter"> The OData $filter expression to apply to the search query. </param>
        /// <param name="highlightFields"> The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;. </param>
        /// <param name="orderBy"> The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. </param>
        /// <param name="queryType"> A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax. Allowed values: &quot;simple&quot; | &quot;full&quot;. </param>
        /// <param name="scoringParameters"> The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes). </param>
        /// <param name="scoringProfile"> The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. </param>
        /// <param name="searchFields"> The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. </param>
        /// <param name="searchMode"> A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. Allowed values: &quot;any&quot; | &quot;all&quot;. </param>
        /// <param name="select"> The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. </param>
        /// <param name="skip"> The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead. </param>
        /// <param name="top"> The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SearchGet and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.SearchGet();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// ]]></code>
        /// This sample shows how to call SearchGet with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.SearchGet("<searchText>", true, new String[]{"<facets>"}, "<filter>", new String[]{"<highlightFields>"}, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<orderBy>"}, "<queryType>", new String[]{"<scoringParameters>"}, "<scoringProfile>", new String[]{"<searchFields>"}, "<searchMode>", new String[]{"<select>"}, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@odata.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("<test>")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("facets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("filter").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlight").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPostTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPreTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("orderby").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("queryType").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringParameters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringProfile").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("search").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchFields").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchMode").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("select").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("skip").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("top").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("<test>")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@odata.nextLink").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Search-Documents
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchDocumentsResult</c>:
        /// <code>{
        ///   @odata.count: number, # Optional. The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can&apos;t return all the requested documents in a single Search response.
        ///   @search.facets: Dictionary&lt;string, FacetResult[]&gt;, # Optional. The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
        ///   @search.nextPageParameters: {
        ///     count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///     facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///     filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///     highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///     highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///     highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///     orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///     queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///     scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///     scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///     search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///     searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///     searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///     select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///     skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///     top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        ///   }, # Optional. Continuation JSON payload returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
        ///   value: [
        ///     {
        ///       @search.score: number, # Required. The relevance score of the document compared to other documents returned by the query.
        ///       @search.highlights: Dictionary&lt;string, string[]&gt;, # Optional. Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        ///   @odata.nextLink: string, # Optional. Continuation URL returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SearchGet(string searchText = null, bool? includeTotalResultCount = null, IEnumerable<string> facets = null, string filter = null, IEnumerable<string> highlightFields = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> orderBy = null, string queryType = null, IEnumerable<string> scoringParameters = null, string scoringProfile = null, IEnumerable<string> searchFields = null, string searchMode = null, IEnumerable<string> select = null, int? skip = null, int? top = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.SearchGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchGetRequest(searchText, includeTotalResultCount, facets, filter, highlightFields, highlightPostTag, highlightPreTag, orderBy, queryType, scoringParameters, scoringProfile, searchFields, searchMode, select, skip, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches for documents in the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SearchPostAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SearchPostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// ]]></code>
        /// This sample shows how to call SearchPostAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     count = true,
        ///     facets = new[] {
        ///         "<String>"
        ///     },
        ///     filter = "<filter>",
        ///     highlight = "<highlight>",
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     orderby = "<orderby>",
        ///     queryType = "simple",
        ///     scoringParameters = new[] {
        ///         "<String>"
        ///     },
        ///     scoringProfile = "<scoringProfile>",
        ///     search = "<search>",
        ///     searchFields = "<searchFields>",
        ///     searchMode = "any",
        ///     select = "<select>",
        ///     skip = 1234,
        ///     top = 1234,
        /// };
        /// 
        /// Response response = await client.SearchPostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@odata.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("<test>")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("facets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("filter").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlight").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPostTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPreTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("orderby").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("queryType").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringParameters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringProfile").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("search").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchFields").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchMode").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("select").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("skip").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("top").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("<test>")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@odata.nextLink").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Search-Documents
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SearchRequest</c>:
        /// <code>{
        ///   count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///   facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///   filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///   highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///   orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///   queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///   scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///   scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///   search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///   searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///   searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///   select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///   skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///   top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchDocumentsResult</c>:
        /// <code>{
        ///   @odata.count: number, # Optional. The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can&apos;t return all the requested documents in a single Search response.
        ///   @search.facets: Dictionary&lt;string, FacetResult[]&gt;, # Optional. The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
        ///   @search.nextPageParameters: {
        ///     count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///     facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///     filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///     highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///     highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///     highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///     orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///     queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///     scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///     scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///     search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///     searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///     searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///     select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///     skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///     top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        ///   }, # Optional. Continuation JSON payload returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
        ///   value: [
        ///     {
        ///       @search.score: number, # Required. The relevance score of the document compared to other documents returned by the query.
        ///       @search.highlights: Dictionary&lt;string, string[]&gt;, # Optional. Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        ///   @odata.nextLink: string, # Optional. Continuation URL returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SearchPostAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SearchPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchPostRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches for documents in the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SearchPost and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.SearchPost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// ]]></code>
        /// This sample shows how to call SearchPost with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     count = true,
        ///     facets = new[] {
        ///         "<String>"
        ///     },
        ///     filter = "<filter>",
        ///     highlight = "<highlight>",
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     orderby = "<orderby>",
        ///     queryType = "simple",
        ///     scoringParameters = new[] {
        ///         "<String>"
        ///     },
        ///     scoringProfile = "<scoringProfile>",
        ///     search = "<search>",
        ///     searchFields = "<searchFields>",
        ///     searchMode = "any",
        ///     select = "<select>",
        ///     skip = 1234,
        ///     top = 1234,
        /// };
        /// 
        /// Response response = client.SearchPost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@odata.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("<test>")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("facets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("filter").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlight").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPostTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("highlightPreTag").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("orderby").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("queryType").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringParameters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("scoringProfile").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("search").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchFields").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("searchMode").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("select").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("skip").ToString());
        /// Console.WriteLine(result.GetProperty("@search.nextPageParameters").GetProperty("top").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("<test>")[0].ToString());
        /// Console.WriteLine(result.GetProperty("@odata.nextLink").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Search-Documents
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SearchRequest</c>:
        /// <code>{
        ///   count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///   facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///   filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///   highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///   orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///   queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///   scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///   scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///   search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///   searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///   searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///   select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///   skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///   top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchDocumentsResult</c>:
        /// <code>{
        ///   @odata.count: number, # Optional. The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can&apos;t return all the requested documents in a single Search response.
        ///   @search.facets: Dictionary&lt;string, FacetResult[]&gt;, # Optional. The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
        ///   @search.nextPageParameters: {
        ///     count: boolean, # Optional. A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        ///     facets: [string], # Optional. The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        ///     filter: string, # Optional. The OData $filter expression to apply to the search query.
        ///     highlight: string, # Optional. The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        ///     highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &amp;lt;/em&amp;gt;.
        ///     highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &amp;lt;em&amp;gt;.
        ///     orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///     queryType: &quot;simple&quot; | &quot;full&quot;, # Optional. A value that specifies the syntax of the search query. The default is &apos;simple&apos;. Use &apos;full&apos; if your query uses the Lucene query syntax.
        ///     scoringParameters: [string], # Optional. The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called &apos;mylocation&apos; the parameter string would be &quot;mylocation--122.2,44.8&quot; (without the quotes).
        ///     scoringProfile: string, # Optional. The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        ///     search: string, # Optional. A full-text search query expression; Use &quot;*&quot; or omit this parameter to match all documents.
        ///     searchFields: string, # Optional. The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        ///     searchMode: &quot;any&quot; | &quot;all&quot;, # Optional. A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        ///     select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        ///     skip: number, # Optional. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        ///     top: number, # Optional. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        ///   }, # Optional. Continuation JSON payload returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
        ///   value: [
        ///     {
        ///       @search.score: number, # Required. The relevance score of the document compared to other documents returned by the query.
        ///       @search.highlights: Dictionary&lt;string, string[]&gt;, # Optional. Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        ///   @odata.nextLink: string, # Optional. Continuation URL returned when Azure Cognitive Search can&apos;t return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SearchPost(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SearchPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchPostRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a document from the index. </summary>
        /// <param name="key"> The key of the document to retrieve. </param>
        /// <param name="selectedFields"> List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetSearchAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.GetSearchAsync("<key>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSearchAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.GetSearchAsync("<key>", new String[]{"<selectedFields>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetSearchAsync(string key, IEnumerable<string> selectedFields = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(key, nameof(key));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.GetSearch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSearchRequest(key, selectedFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a document from the index. </summary>
        /// <param name="key"> The key of the document to retrieve. </param>
        /// <param name="selectedFields"> List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetSearch with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.GetSearch("<key>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSearch with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.GetSearch("<key>", new String[]{"<selectedFields>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        public virtual Response GetSearch(string key, IEnumerable<string> selectedFields = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(key, nameof(key));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.GetSearch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSearchRequest(key, selectedFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suggests documents in the index that match the given partial query text. </summary>
        /// <param name="searchText"> The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters. </param>
        /// <param name="suggesterName"> The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition. </param>
        /// <param name="filter"> An OData expression that filters the documents considered for suggestions. </param>
        /// <param name="useFuzzyMatching"> A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. </param>
        /// <param name="orderBy"> The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. </param>
        /// <param name="searchFields"> The list of field names to search for the specified search text. Target fields must be included in the specified suggester. </param>
        /// <param name="select"> The list of fields to retrieve. If unspecified, only the key field will be included in the results. </param>
        /// <param name="top"> The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchText"/> or <paramref name="suggesterName"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SuggestGetAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.SuggestGetAsync("<searchText>", "<suggesterName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// This sample shows how to call SuggestGetAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.SuggestGetAsync("<searchText>", "<suggesterName>", "<filter>", true, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<orderBy>"}, new String[]{"<searchFields>"}, new String[]{"<select>"}, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/suggestions
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.text: string, # Required. The text of the suggestion result.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SuggestGetAsync(string searchText, string suggesterName, string filter = null, bool? useFuzzyMatching = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> orderBy = null, IEnumerable<string> searchFields = null, IEnumerable<string> select = null, int? top = null, RequestContext context = null)
        {
            Argument.AssertNotNull(searchText, nameof(searchText));
            Argument.AssertNotNull(suggesterName, nameof(suggesterName));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SuggestGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestGetRequest(searchText, suggesterName, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, orderBy, searchFields, select, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suggests documents in the index that match the given partial query text. </summary>
        /// <param name="searchText"> The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters. </param>
        /// <param name="suggesterName"> The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition. </param>
        /// <param name="filter"> An OData expression that filters the documents considered for suggestions. </param>
        /// <param name="useFuzzyMatching"> A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. </param>
        /// <param name="orderBy"> The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. </param>
        /// <param name="searchFields"> The list of field names to search for the specified search text. Target fields must be included in the specified suggester. </param>
        /// <param name="select"> The list of fields to retrieve. If unspecified, only the key field will be included in the results. </param>
        /// <param name="top"> The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchText"/> or <paramref name="suggesterName"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SuggestGet with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.SuggestGet("<searchText>", "<suggesterName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// This sample shows how to call SuggestGet with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.SuggestGet("<searchText>", "<suggesterName>", "<filter>", true, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<orderBy>"}, new String[]{"<searchFields>"}, new String[]{"<select>"}, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/suggestions
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.text: string, # Required. The text of the suggestion result.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SuggestGet(string searchText, string suggesterName, string filter = null, bool? useFuzzyMatching = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> orderBy = null, IEnumerable<string> searchFields = null, IEnumerable<string> select = null, int? top = null, RequestContext context = null)
        {
            Argument.AssertNotNull(searchText, nameof(searchText));
            Argument.AssertNotNull(suggesterName, nameof(suggesterName));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SuggestGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestGetRequest(searchText, suggesterName, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, orderBy, searchFields, select, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suggests documents in the index that match the given partial query text. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SuggestPostAsync with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     suggesterName = "<suggesterName>",
        /// };
        /// 
        /// Response response = await client.SuggestPostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// This sample shows how to call SuggestPostAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     filter = "<filter>",
        ///     fuzzy = true,
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     orderby = "<orderby>",
        ///     search = "<search>",
        ///     searchFields = "<searchFields>",
        ///     select = "<select>",
        ///     suggesterName = "<suggesterName>",
        ///     top = 1234,
        /// };
        /// 
        /// Response response = await client.SuggestPostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/suggestions
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SuggestRequest</c>:
        /// <code>{
        ///   filter: string, # Optional. An OData expression that filters the documents considered for suggestions.
        ///   fuzzy: boolean, # Optional. A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
        ///   orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///   search: string, # Required. The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
        ///   searchFields: string, # Optional. The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
        ///   select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.
        ///   suggesterName: string, # Required. The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition.
        ///   top: number, # Optional. The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.text: string, # Required. The text of the suggestion result.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SuggestPostAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SuggestPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestPostRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suggests documents in the index that match the given partial query text. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SuggestPost with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     suggesterName = "<suggesterName>",
        /// };
        /// 
        /// Response response = client.SuggestPost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// This sample shows how to call SuggestPost with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     filter = "<filter>",
        ///     fuzzy = true,
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     orderby = "<orderby>",
        ///     search = "<search>",
        ///     searchFields = "<searchFields>",
        ///     select = "<select>",
        ///     suggesterName = "<suggesterName>",
        ///     top = 1234,
        /// };
        /// 
        /// Response response = client.SuggestPost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/suggestions
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SuggestRequest</c>:
        /// <code>{
        ///   filter: string, # Optional. An OData expression that filters the documents considered for suggestions.
        ///   fuzzy: boolean, # Optional. A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
        ///   orderby: string, # Optional. The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        ///   search: string, # Required. The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
        ///   searchFields: string, # Optional. The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
        ///   select: string, # Optional. The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.
        ///   suggesterName: string, # Required. The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition.
        ///   top: number, # Optional. The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.text: string, # Required. The text of the suggestion result.
        ///     }
        ///   ], # Required. The sequence of results returned by the query.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SuggestPost(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.SuggestPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestPostRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sends a batch of document write actions to the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call IndexAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     value = new[] {
        ///         new {
        ///             @search.action = "upload",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.IndexAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>IndexBatch</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.action: &quot;upload&quot; | &quot;merge&quot; | &quot;mergeOrUpload&quot; | &quot;delete&quot;, # Optional. The operation to perform on a document in an indexing batch.
        ///     }
        ///   ], # Required. The actions in the batch.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IndexDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       key: string, # Required. The key of a document that was in the indexing request.
        ///       errorMessage: string, # Optional. The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
        ///       status: boolean, # Required. A value indicating whether the indexing operation succeeded for the document identified by the key.
        ///       statusCode: number, # Required. The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
        ///     }
        ///   ], # Required. The list of status information for each document in the indexing request.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> IndexAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.Index");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIndexRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sends a batch of document write actions to the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Index with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     value = new[] {
        ///         new {
        ///             @search.action = "upload",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.Index(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>IndexBatch</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       @search.action: &quot;upload&quot; | &quot;merge&quot; | &quot;mergeOrUpload&quot; | &quot;delete&quot;, # Optional. The operation to perform on a document in an indexing batch.
        ///     }
        ///   ], # Required. The actions in the batch.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IndexDocumentsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       key: string, # Required. The key of a document that was in the indexing request.
        ///       errorMessage: string, # Optional. The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
        ///       status: boolean, # Required. A value indicating whether the indexing operation succeeded for the document identified by the key.
        ///       statusCode: number, # Required. The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
        ///     }
        ///   ], # Required. The list of status information for each document in the indexing request.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Index(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.Index");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIndexRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Autocompletes incomplete query terms based on input text and matching terms in the index. </summary>
        /// <param name="searchText"> The incomplete term which should be auto-completed. </param>
        /// <param name="suggesterName"> The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition. </param>
        /// <param name="autocompleteMode"> Specifies the mode for Autocomplete. The default is &apos;oneTerm&apos;. Use &apos;twoTerms&apos; to get shingles and &apos;oneTermWithContext&apos; to use the current context while producing auto-completed terms. Allowed values: &quot;oneTerm&quot; | &quot;twoTerms&quot; | &quot;oneTermWithContext&quot;. </param>
        /// <param name="filter"> An OData expression that filters the documents used to produce completed terms for the Autocomplete result. </param>
        /// <param name="useFuzzyMatching"> A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. </param>
        /// <param name="searchFields"> The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. </param>
        /// <param name="top"> The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchText"/> or <paramref name="suggesterName"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutocompleteGetAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.AutocompleteGetAsync("<searchText>", "<suggesterName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// This sample shows how to call AutocompleteGetAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.AutocompleteGetAsync("<searchText>", "<suggesterName>", "<autocompleteMode>", "<filter>", true, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<searchFields>"}, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/autocomplete
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutocompleteResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       text: string, # Required. The completed term.
        ///       queryPlusText: string, # Required. The query along with the completed term.
        ///     }
        ///   ], # Required. The list of returned Autocompleted items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AutocompleteGetAsync(string searchText, string suggesterName, string autocompleteMode = null, string filter = null, bool? useFuzzyMatching = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> searchFields = null, int? top = null, RequestContext context = null)
        {
            Argument.AssertNotNull(searchText, nameof(searchText));
            Argument.AssertNotNull(suggesterName, nameof(suggesterName));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.AutocompleteGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutocompleteGetRequest(searchText, suggesterName, autocompleteMode, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, searchFields, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Autocompletes incomplete query terms based on input text and matching terms in the index. </summary>
        /// <param name="searchText"> The incomplete term which should be auto-completed. </param>
        /// <param name="suggesterName"> The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition. </param>
        /// <param name="autocompleteMode"> Specifies the mode for Autocomplete. The default is &apos;oneTerm&apos;. Use &apos;twoTerms&apos; to get shingles and &apos;oneTermWithContext&apos; to use the current context while producing auto-completed terms. Allowed values: &quot;oneTerm&quot; | &quot;twoTerms&quot; | &quot;oneTermWithContext&quot;. </param>
        /// <param name="filter"> An OData expression that filters the documents used to produce completed terms for the Autocomplete result. </param>
        /// <param name="useFuzzyMatching"> A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. </param>
        /// <param name="highlightPostTag"> A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. </param>
        /// <param name="highlightPreTag"> A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. </param>
        /// <param name="searchFields"> The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. </param>
        /// <param name="top"> The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchText"/> or <paramref name="suggesterName"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutocompleteGet with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.AutocompleteGet("<searchText>", "<suggesterName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// This sample shows how to call AutocompleteGet with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.AutocompleteGet("<searchText>", "<suggesterName>", "<autocompleteMode>", "<filter>", true, "<highlightPostTag>", "<highlightPreTag>", new String[]{"<searchFields>"}, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/autocomplete
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutocompleteResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       text: string, # Required. The completed term.
        ///       queryPlusText: string, # Required. The query along with the completed term.
        ///     }
        ///   ], # Required. The list of returned Autocompleted items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AutocompleteGet(string searchText, string suggesterName, string autocompleteMode = null, string filter = null, bool? useFuzzyMatching = null, string highlightPostTag = null, string highlightPreTag = null, IEnumerable<string> searchFields = null, int? top = null, RequestContext context = null)
        {
            Argument.AssertNotNull(searchText, nameof(searchText));
            Argument.AssertNotNull(suggesterName, nameof(suggesterName));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.AutocompleteGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutocompleteGetRequest(searchText, suggesterName, autocompleteMode, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, searchFields, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Autocompletes incomplete query terms based on input text and matching terms in the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutocompletePostAsync with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     suggesterName = "<suggesterName>",
        /// };
        /// 
        /// Response response = await client.AutocompletePostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// This sample shows how to call AutocompletePostAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     autocompleteMode = "oneTerm",
        ///     filter = "<filter>",
        ///     fuzzy = true,
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     searchFields = "<searchFields>",
        ///     suggesterName = "<suggesterName>",
        ///     top = 1234,
        /// };
        /// 
        /// Response response = await client.AutocompletePostAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/autocomplete
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AutocompleteRequest</c>:
        /// <code>{
        ///   search: string, # Required. The search text on which to base autocomplete results.
        ///   autocompleteMode: &quot;oneTerm&quot; | &quot;twoTerms&quot; | &quot;oneTermWithContext&quot;, # Optional. Specifies the mode for Autocomplete. The default is &apos;oneTerm&apos;. Use &apos;twoTerms&apos; to get shingles and &apos;oneTermWithContext&apos; to use the current context while producing auto-completed terms.
        ///   filter: string, # Optional. An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
        ///   fuzzy: boolean, # Optional. A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
        ///   searchFields: string, # Optional. The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
        ///   suggesterName: string, # Required. The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition.
        ///   top: number, # Optional. The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutocompleteResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       text: string, # Required. The completed term.
        ///       queryPlusText: string, # Required. The query along with the completed term.
        ///     }
        ///   ], # Required. The list of returned Autocompleted items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AutocompletePostAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.AutocompletePost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutocompletePostRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Autocompletes incomplete query terms based on input text and matching terms in the index. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutocompletePost with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     suggesterName = "<suggesterName>",
        /// };
        /// 
        /// Response response = client.AutocompletePost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// This sample shows how to call AutocompletePost with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SearchClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     search = "<search>",
        ///     autocompleteMode = "oneTerm",
        ///     filter = "<filter>",
        ///     fuzzy = true,
        ///     highlightPostTag = "<highlightPostTag>",
        ///     highlightPreTag = "<highlightPreTag>",
        ///     searchFields = "<searchFields>",
        ///     suggesterName = "<suggesterName>",
        ///     top = 1234,
        /// };
        /// 
        /// Response response = client.AutocompletePost(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/autocomplete
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AutocompleteRequest</c>:
        /// <code>{
        ///   search: string, # Required. The search text on which to base autocomplete results.
        ///   autocompleteMode: &quot;oneTerm&quot; | &quot;twoTerms&quot; | &quot;oneTermWithContext&quot;, # Optional. Specifies the mode for Autocomplete. The default is &apos;oneTerm&apos;. Use &apos;twoTerms&apos; to get shingles and &apos;oneTermWithContext&apos; to use the current context while producing auto-completed terms.
        ///   filter: string, # Optional. An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
        ///   fuzzy: boolean, # Optional. A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there&apos;s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
        ///   highlightPostTag: string, # Optional. A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
        ///   highlightPreTag: string, # Optional. A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
        ///   searchFields: string, # Optional. The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
        ///   suggesterName: string, # Required. The name of the suggester as specified in the suggesters collection that&apos;s part of the index definition.
        ///   top: number, # Optional. The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutocompleteResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       text: string, # Required. The completed term.
        ///       queryPlusText: string, # Required. The query along with the completed term.
        ///     }
        ///   ], # Required. The list of returned Autocompleted items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AutocompletePost(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SearchClient.AutocompletePost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutocompletePostRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCountRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/$count", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            return message;
        }

        internal HttpMessage CreateSearchGetRequest(string searchText, bool? includeTotalResultCount, IEnumerable<string> facets, string filter, IEnumerable<string> highlightFields, string highlightPostTag, string highlightPreTag, IEnumerable<string> orderBy, string queryType, IEnumerable<string> scoringParameters, string scoringProfile, IEnumerable<string> searchFields, string searchMode, IEnumerable<string> select, int? skip, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs", false);
            if (searchText != null)
            {
                uri.AppendQuery("search", searchText, true);
            }
            if (includeTotalResultCount != null)
            {
                uri.AppendQuery("$count", includeTotalResultCount.Value, true);
            }
            if (facets != null)
            {
                foreach (var param in facets)
                {
                    uri.AppendQuery("facet", param, true);
                }
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (highlightFields != null)
            {
                uri.AppendQueryDelimited("highlight", highlightFields, ",", true);
            }
            if (highlightPostTag != null)
            {
                uri.AppendQuery("highlightPostTag", highlightPostTag, true);
            }
            if (highlightPreTag != null)
            {
                uri.AppendQuery("highlightPreTag", highlightPreTag, true);
            }
            if (orderBy != null)
            {
                uri.AppendQueryDelimited("$orderby", orderBy, ",", true);
            }
            if (queryType != null)
            {
                uri.AppendQuery("queryType", queryType, true);
            }
            if (scoringParameters != null)
            {
                foreach (var param in scoringParameters)
                {
                    uri.AppendQuery("scoringParameter", param, true);
                }
            }
            if (scoringProfile != null)
            {
                uri.AppendQuery("scoringProfile", scoringProfile, true);
            }
            if (searchFields != null)
            {
                uri.AppendQueryDelimited("searchFields", searchFields, ",", true);
            }
            if (searchMode != null)
            {
                uri.AppendQuery("searchMode", searchMode, true);
            }
            if (select != null)
            {
                uri.AppendQueryDelimited("$select", select, ",", true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            return message;
        }

        internal HttpMessage CreateSearchPostRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.post.search", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSearchRequest(string key, IEnumerable<string> selectedFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs('", false);
            uri.AppendPath(key, true);
            uri.AppendPath("')", false);
            if (selectedFields != null)
            {
                uri.AppendQueryDelimited("$select", selectedFields, ",", true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            return message;
        }

        internal HttpMessage CreateSuggestGetRequest(string searchText, string suggesterName, string filter, bool? useFuzzyMatching, string highlightPostTag, string highlightPreTag, IEnumerable<string> orderBy, IEnumerable<string> searchFields, IEnumerable<string> select, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.suggest", false);
            uri.AppendQuery("search", searchText, true);
            uri.AppendQuery("suggesterName", suggesterName, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (useFuzzyMatching != null)
            {
                uri.AppendQuery("fuzzy", useFuzzyMatching.Value, true);
            }
            if (highlightPostTag != null)
            {
                uri.AppendQuery("highlightPostTag", highlightPostTag, true);
            }
            if (highlightPreTag != null)
            {
                uri.AppendQuery("highlightPreTag", highlightPreTag, true);
            }
            if (orderBy != null)
            {
                uri.AppendQueryDelimited("$orderby", orderBy, ",", true);
            }
            if (searchFields != null)
            {
                uri.AppendQueryDelimited("searchFields", searchFields, ",", true);
            }
            if (select != null)
            {
                uri.AppendQueryDelimited("$select", select, ",", true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            return message;
        }

        internal HttpMessage CreateSuggestPostRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.post.suggest", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateIndexRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200207);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.index", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAutocompleteGetRequest(string searchText, string suggesterName, string autocompleteMode, string filter, bool? useFuzzyMatching, string highlightPostTag, string highlightPreTag, IEnumerable<string> searchFields, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.autocomplete", false);
            uri.AppendQuery("search", searchText, true);
            uri.AppendQuery("suggesterName", suggesterName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (autocompleteMode != null)
            {
                uri.AppendQuery("autocompleteMode", autocompleteMode, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (useFuzzyMatching != null)
            {
                uri.AppendQuery("fuzzy", useFuzzyMatching.Value, true);
            }
            if (highlightPostTag != null)
            {
                uri.AppendQuery("highlightPostTag", highlightPostTag, true);
            }
            if (highlightPreTag != null)
            {
                uri.AppendQuery("highlightPreTag", highlightPreTag, true);
            }
            if (searchFields != null)
            {
                uri.AppendQueryDelimited("searchFields", searchFields, ",", true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            return message;
        }

        internal HttpMessage CreateAutocompletePostRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/docs/search.post.autocomplete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=none");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200207;
        private static ResponseClassifier ResponseClassifier200207 => _responseClassifier200207 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 207 });
    }
}
