// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Search.Documents
{
    // Data plane generated client. The SynonymMaps service client.
    /// <summary> The SynonymMaps service client. </summary>
    public partial class SynonymMapsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly Guid? _xMsClientRequestId;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SynonymMapsClient for mocking. </summary>
        protected SynonymMapsClient()
        {
        }

        /// <summary> Initializes a new instance of SynonymMapsClient. </summary>
        /// <param name="endpoint"> The endpoint URL of the search service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SynonymMapsClient(string endpoint) : this(endpoint, null, new SearchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SynonymMapsClient. </summary>
        /// <param name="endpoint"> The endpoint URL of the search service. </param>
        /// <param name="xMsClientRequestId"> The tracking ID sent with the request to help with debugging. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SynonymMapsClient(string endpoint, Guid? xMsClientRequestId, SearchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SearchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _xMsClientRequestId = xMsClientRequestId;
            _apiVersion = options.Version;
        }

        /// <summary> Creates a new synonym map or updates a synonym map if it already exists. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to create or update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<synonymMapName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        ///     @odata.etag = "<@odata.etag>",
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<synonymMapName>", RequestContent.Create(data), new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Update-Synonym-Map
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string synonymMapName, RequestContent content, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(synonymMapName, content, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new synonym map or updates a synonym map if it already exists. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to create or update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<synonymMapName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        ///     @odata.etag = "<@odata.etag>",
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<synonymMapName>", RequestContent.Create(data), new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Update-Synonym-Map
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string synonymMapName, RequestContent content, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(synonymMapName, content, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a synonym map. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to delete. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.DeleteAsync("<synonymMapName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteAsync with all parameters.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.DeleteAsync("<synonymMapName>", new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string synonymMapName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(synonymMapName, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a synonym map. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to delete. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.Delete("<synonymMapName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Delete with all parameters.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.Delete("<synonymMapName>", new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string synonymMapName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(synonymMapName, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a synonym map definition. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSynonymMapAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.GetSynonymMapAsync("<synonymMapName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Get-Synonym-Map
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSynonymMapAsync(string synonymMapName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.GetSynonymMap");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSynonymMapRequest(synonymMapName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a synonym map definition. </summary>
        /// <param name="synonymMapName"> The name of the synonym map to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="synonymMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSynonymMap with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.GetSynonymMap("<synonymMapName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Get-Synonym-Map
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSynonymMap(string synonymMapName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(synonymMapName, nameof(synonymMapName));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.GetSynonymMap");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSynonymMapRequest(synonymMapName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all synonym maps available for a search service. </summary>
        /// <param name="select"> Selects which top-level properties of the synonym maps to retrieve. Specified as a comma-separated list of JSON property names, or &apos;*&apos; for all properties. The default is all properties. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSynonymMapsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.GetSynonymMapsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSynonymMapsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = await client.GetSynonymMapsAsync("<select>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/List-Synonym-Maps
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ListSynonymMapsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string, # Required. The name of the synonym map.
        ///       format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///       synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///       @odata.etag: string, # Optional. The ETag of the synonym map.
        ///     }
        ///   ], # Required. The synonym maps in the Search service.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSynonymMapsAsync(string select = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.GetSynonymMaps");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSynonymMapsRequest(select, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all synonym maps available for a search service. </summary>
        /// <param name="select"> Selects which top-level properties of the synonym maps to retrieve. Specified as a comma-separated list of JSON property names, or &apos;*&apos; for all properties. The default is all properties. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSynonymMaps and parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.GetSynonymMaps();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSynonymMaps with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// Response response = client.GetSynonymMaps("<select>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/List-Synonym-Maps
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ListSynonymMapsResult</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string, # Required. The name of the synonym map.
        ///       format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///       synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///       @odata.etag: string, # Optional. The ETag of the synonym map.
        ///     }
        ///   ], # Required. The synonym maps in the Search service.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSynonymMaps(string select = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.GetSynonymMaps");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSynonymMapsRequest(select, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new synonym map. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAsync with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        /// };
        /// 
        /// Response response = await client.CreateAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        ///     @odata.etag = "<@odata.etag>",
        /// };
        /// 
        /// Response response = await client.CreateAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Create-Synonym-Map
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new synonym map. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Create with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        /// };
        /// 
        /// Response response = client.Create(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// ]]></code>
        /// This sample shows how to call Create with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new SynonymMapsClient("<https://my-service.azure.com>");
        /// 
        /// var data = new {
        ///     name = "<name>",
        ///     format = "<format>",
        ///     synonyms = "<synonyms>",
        ///     @odata.etag = "<@odata.etag>",
        /// };
        /// 
        /// Response response = client.Create(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("format").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms").ToString());
        /// Console.WriteLine(result.GetProperty("@odata.etag").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/searchservice/Create-Synonym-Map
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SynonymMap</c>:
        /// <code>{
        ///   name: string, # Required. The name of the synonym map.
        ///   format: string, # Required. The format of the synonym map. Only the &apos;solr&apos; format is currently supported.
        ///   synonyms: string, # Required. A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
        ///   @odata.etag: string, # Optional. The ETag of the synonym map.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Create(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SynonymMapsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string synonymMapName, RequestContent content, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/synonymmaps('", false);
            uri.AppendPath(synonymMapName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Prefer", "return=representation");
            request.Headers.Add("Accept", "application/json; odata.metadata=minimal");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string synonymMapName, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/synonymmaps('", false);
            uri.AppendPath(synonymMapName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=minimal");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreateGetSynonymMapRequest(string synonymMapName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/synonymmaps('", false);
            uri.AppendPath(synonymMapName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=minimal");
            return message;
        }

        internal HttpMessage CreateGetSynonymMapsRequest(string select, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/synonymmaps", false);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=minimal");
            return message;
        }

        internal HttpMessage CreateCreateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/synonymmaps", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json; odata.metadata=minimal");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204404;
        private static ResponseClassifier ResponseClassifier204404 => _responseClassifier204404 ??= new StatusCodeClassifier(stackalloc ushort[] { 204, 404 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
