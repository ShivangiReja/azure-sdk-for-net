// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Template.Models
{
    /// <summary> Type of the predicted tag. </summary>
    public readonly partial struct TagType : IEquatable<TagType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TagType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TagType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegularValue = "Regular";
        private const string NegativeValue = "Negative";
        private const string GeneralProductValue = "GeneralProduct";

        /// <summary> Regular. </summary>
        public static TagType Regular { get; } = new TagType(RegularValue);
        /// <summary> Negative. </summary>
        public static TagType Negative { get; } = new TagType(NegativeValue);
        /// <summary> GeneralProduct. </summary>
        public static TagType GeneralProduct { get; } = new TagType(GeneralProductValue);
        /// <summary> Determines if two <see cref="TagType"/> values are the same. </summary>
        public static bool operator ==(TagType left, TagType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TagType"/> values are not the same. </summary>
        public static bool operator !=(TagType left, TagType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TagType"/>. </summary>
        public static implicit operator TagType(string value) => new TagType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TagType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TagType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
