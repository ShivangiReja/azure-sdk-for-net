// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Template.Models
{
    public partial class ImagePrediction
    {
        internal static ImagePrediction DeserializeImagePrediction(JsonElement element)
        {
            Optional<Guid> id = default;
            Optional<Guid> project = default;
            Optional<Guid> iteration = default;
            Optional<DateTimeOffset> created = default;
            Optional<IReadOnlyList<Prediction>> predictions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("project"))
                {
                    project = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("iteration"))
                {
                    iteration = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("created"))
                {
                    created = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("predictions"))
                {
                    List<Prediction> array = new List<Prediction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Prediction.DeserializePrediction(item));
                    }
                    predictions = array;
                    continue;
                }
            }
            return new ImagePrediction(Optional.ToNullable(id), Optional.ToNullable(project), Optional.ToNullable(iteration), Optional.ToNullable(created), Optional.ToList(predictions));
        }

        internal static ImagePrediction DeserializeImagePrediction(XElement element)
        {
            Guid? id = default;
            Guid? project = default;
            Guid? iteration = default;
            DateTimeOffset? created = default;
            IReadOnlyList<Prediction> predictions = default;
            if (element.Element("id") is XElement idElement)
            {
                id = new Guid(idElement.Value);
            }
            if (element.Element("project") is XElement projectElement)
            {
                project = new Guid(projectElement.Value);
            }
            if (element.Element("iteration") is XElement iterationElement)
            {
                iteration = new Guid(iterationElement.Value);
            }
            if (element.Element("created") is XElement createdElement)
            {
                created = createdElement.GetDateTimeOffsetValue("O");
            }
            var array = new List<Prediction>();
            foreach (var e in element.Elements("Prediction"))
            {
                array.Add(Prediction.DeserializePrediction(e));
            }
            predictions = array;
            return new ImagePrediction(id, project, iteration, created, predictions);
        }
    }
}
